(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



MakePlots[name_]:=Block[{i,j,pList},

Print["Creating plots"];
pList=DEFINITION[name][Plots];

SSP`SubNumericalValues=MakeSubNum/@SSP`ScanData;

If[Head[pList]===List,
For[j=1,j<=Length[pList],
Switch[pList[[j,1]],
P2D,
	Make2DPlot[pList[[j,2,1]],pList[[j,2,2]],pList[[j,3]],pList[[j,4]],SSP`ScanData];,
P3D,
	Make3DPlot[pList[[j,2,1]],pList[[j,2,2]],pList[[j,2,3]],pList[[j,3]],pList[[j,4]],SSP`ScanData];
];
j++;];
];
];


MakeDataList[{block1_,entry1_},{block2_,entry2_},dataset_]:=Block[{i,pos},
list={};
For[i=1,i<=Length[dataset],
list=Join[list,{{FindValue[ToString[block1],entry1,dataset[[i]],1],FindValue[ToString[block2],entry2,dataset[[i]],1]}}];
i++;];
Return[list];
];

MakeDataList3[{block1_,entry1_},{block2_,entry2_},{block3_,entry3_},dataset_]:=Block[{i,pos},
list={};
For[i=1,i<=Length[dataset],
list=Join[list,{{FindValue[ToString[block1],entry1,dataset[[i]],1],FindValue[ToString[block2],entry2,dataset[[i]],1],FindValue[ToString[block3],entry3,dataset[[i]],1]}}];
i++;];
Return[list];
];


Make2DPlot[x_,y_,style_,file_,data_]:=Block[{cStyle,i,j=1,Name={"A","B","C","D","E","F","G","H","I","J","K","L","M","N","U","V","W","X","Y","Z"}},
plots=Table[{},{Length[y]}];
(* cStyle = style /. UseLaTeX[a_]:>"Lstring"<>ToString[j++]; *)
cStyle = style /. UseLaTeX[a_]:>Name[[j++]]; 
For[i=1,i<=Length[plots],
If[Head[style[[i]]]=!=List && Head[style]===List,
plots[[i]]=Plot2DParameter[x,y[[i]],cStyle,data,False];,
plots[[i]]=Plot2DParameter[x,y[[i]],cStyle[[i]],data,False];
];
i++;];
plotComplete = Show[plots,PlotRange->All];
If[FreeQ[style,UseLaTeX]==False,
Export[StringDrop[file,-4]<>"_fm.eps",plotComplete];
plotComplete = Show[plots,PlotRange->All]; 
Export[StringDrop[file,-4]<>"_fm.eps",plotComplete];
MakeLaTeXStyle[style,file];,
Export[file,plotComplete];
];
];

Make3DPlot[x_,y_,zz_,style_,file_,data_]:=Block[{cStyle,i,j=1,Name={"A","B","C","D","E","F","G","H","I","J","K","L","M","N","U","V","W","X","Y","Z"}},
(* cStyle = style /. UseLaTeX[a_]:>"Lstring"<>ToString[j++]; *)
cStyle = style /. UseLaTeX[a_]:>Name[[j++]];
plots=Plot3DParameter[x,y,zz,cStyle,data,False];
plotComplete = Show[plots];
If[FreeQ[style,UseLaTeX]==False,
Export[StringDrop[file,-4]<>"_fm.eps",plotComplete];
plotComplete = Show[plots];
Export[StringDrop[file,-4]<>"_fm.eps",plotComplete];
MakeLaTeXStyle[style,file];,
Export[file,plotComplete];
];
];

MakeLaTeXStyle[style_,file_]:=Block[{i,j,temp,Name={"A","B","C","D","E","F","G","H","I","J","K","L","M","N","U","V","W","X","Y","Z"}},
temp=Cases[style,x_?((Head[#]===UseLaTeX)&),99];
fmout=OpenWrite[StringDrop[file,-4]<>"_fm"];
For[i=1,i<=Length[temp],
(* WriteString[fmout,"\\psfrag{Lstring"<>ToString[i]<>"}[][b][1.25]{"<>ToString[temp[[i,1]]]<>"} \n"]; *)
WriteString[fmout,"\\psfrag{"<>Name[[i]]<>"}[c][c][0.8]{"<>ToString[temp[[i,1]]]<>"} \n"];
i++;
];
Close[fmout];
Run["./../../Package/fragmaster.pl "<>StringDrop[file,-3]];
(*
Run["rm fm.tex"];
Run["rm fm.aux"];
Run["rm fm.ps"];
Run["rm fm.dvi"];
Run["rm "<>file];
Run["rm "<>StringDrop[file,-4]<>"_fm*"];
*)
];
(*
Make2DLogPlot[x_,y_,style_,file_,data_]:=Block[{},
plots=Table[{},{Length[y]}];
For[i=1,i<=Length[plots],
plots[[i]]=Plot2DParameter[x,y[[i]],style[[i]],data,True];
i++;];
plotComplete = Show[plots,PlotRange->All];
Export[file,plotComplete];
];

Make3DLogPlot[x_,y_,z_,style_,file_,data_]:=Block[{},
plots=Plot3DParameter[x,y,z,style,data,True];
plotComplete = Show[plots];
Export[file,plotComplete];
];

*)
Plot2DParameter[x_,y_,style_,data_,log_]:=Block[{i},
(* temp1=MakeDataList[x,y,data]; *)
temp1=Table[{x,y} /. SSP`SubNumericalValues[[k]],{k,1,Length[SSP`SubNumericalValues]}];
If[log,temp1=Log[10,#]&/@Abs/@ temp1;];
PlotTemp=ListPlot[temp1,style];
Return[PlotTemp];
];

Plot3DParameter[x_,y_,zz_,style_,data_,log_]:=Block[{i},
(* temp1=MakeDataList3[x,y,z,data]; *)
temp1=Table[{x,y,zz} /. SSP`SubNumericalValues[[k]],{k,1,Length[SSP`SubNumericalValues]}];
If[log,temp1=Log[10,#]&/@Abs/@ temp1;];
PlotTemp=ListContourPlot[temp1,style];
Return[PlotTemp];
];


GetScanResults[file_]:=Block[{SData},
SData=Get[file];
Return[MakeSubNum/@SSP`SData];
];
