(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



savePIC={b,w,h,l,l3,e,e3,d3,u3,q3};

(* particles that should be produced *)
saveDPP={g,d,u,q};

(* possible LSPs *)
CheckLSP={b,l3,e3,w,h,l,e}; 
CheckLSP = savePIC;
(* CheckLSP={b}; *)


(*
For[iDPP=1,iDPP<=Length[saveDPP],
For[iPIC=1,iPIC<=Length[CheckLSP],
Print[iDPP,iPIC];
ifile=OpenWrite["input.m"];
WriteString[ifile,"<<\"HierarchyEventGenerator_v5.m\"; \n"];
WriteString[ifile,"<<\"TeXOut.m\"; \n"];
WriteString[ifile,"<<\"Model_3G_newSig.m\"; \n"];
WriteString[ifile,"DominantlyProducedParticles={"<>ToString[saveDPP[[iDPP]]]<>"};\n"];
WriteString[ifile,"ForcedLSP={"<>ToString[CheckLSP[[iPIC]]]<>"};\n"];
WriteString[ifile,"ParticlesInCascade="<>ToString[DeleteCases[savePIC,CheckLSP[[iPIC]]]]<>"; \n"];
WriteString[ifile,"OutputFile=\"3G_"<>ToString[CheckLSP[[iPIC]]]<>"_"<>ToString[saveDPP[[iDPP]]]<>".m\";\n"];
WriteString[ifile,"RunHierachieGenerator;\n"];

If[iDPP==1 && iPIC==1, 
WriteString[ifile,"WriteTeXHeader[\"results.tex\"] \n"];
WriteString[ifile,"WriteTeXHeader[\"results_summed.tex\"] \n"];
];

WriteString[ifile,"WriteTeXResult[\"results.tex\",\""<>ToString[CheckLSP[[iPIC]]]<>" / "<>ToString[saveDPP[[iDPP]]]<> "\",\""<>ToString[CheckLSP[[iPIC]]]<>ToString[saveDPP[[iDPP]]]<>".out\"] \n"];
WriteString[ifile,"Exit[]; \n"];
Close[ifile];

Run["math < input.m"];

iPIC++;];
iDPP++;];
*)


PrintHistogram[caption_]:=Block[{k,temp,nv,nl,nj,i1,i2},WriteString[tex,"\\begin{center} \n"];
temp=CurrentHist;
anzahl=Plus@@Transpose[temp][[2]];
WriteString[tex,"\\begin{tabular}{lll} \n"];
WriteString[tex,"\\hline \n "];
WriteString[tex,"Signal & Number & [\%] \\\\ \n "];
WriteString[tex,"\\hline \n "];
For[k=1,k<=Length[temp],WriteString[tex,ToString[temp[[k,1]]]<>"  &  "<>ToString[temp[[k,2]]]<>"  &  "<>ToString[100.*temp[[k,2]]/anzahl]<>"\\\\ \n"];
k++;];
WriteString[tex,"\\hline \n "];
WriteString[tex,"\\end{tabular} \n \n"];
WriteString[tex,"\\end{center} \n \n"];
WriteString[tex,"Total number of signatures: "<>ToString[Plus@@Transpose[temp][[2]]]<>"\n \n"];

WriteString[tex,"\\paragraph*{With and without MET} \n"];
tempWith = Select[temp,(FreeQ[#,MET]==False)&];
tempWithOut = Select[temp,(FreeQ[#,MET]==True)&];
anzahlWith=Plus@@Transpose[tempWith][[2]];
anzahlWithOut=Plus@@Transpose[tempWithOut][[2]];
WriteString[tex,"With MET: "<>ToString[100.*anzahlWith/anzahl]<>"\\\\ \n"];
WriteString[tex,"Without MET: "<>ToString[100.*anzahlWithOut/anzahl]<>"\\\\ \n"];

WriteString[tex, "With MET  \\\\ \n"];
WriteString[tex,"\\begin{tabular}{lll} \n"];
WriteString[tex,"\\hline \n "];
WriteString[tex,"Signal & Number & [\%] \\\\ \n "];
WriteString[tex,"\\hline \n "];
For[k=1,k<=Length[tempWith],WriteString[tex,ToString[tempWith[[k,1]]]<>"  &  "<>ToString[tempWith[[k,2]]]<>"  &  "<>ToString[100.*tempWith[[k,2]]/anzahlWith]<>"\\\\ \n"];
k++;];
WriteString[tex,"\\hline \n "];
WriteString[tex,"\\end{tabular} \n \n"];
WriteString[tex,"\\end{center} \n \n"];

WriteString[tex, "Without MET  \\\\ \n"];
WriteString[tex,"\\begin{tabular}{lll} \n"];
WriteString[tex,"\\hline \n "];
WriteString[tex,"Signal & Number & [\%] \\\\ \n "];
WriteString[tex,"\\hline \n "];
For[k=1,k<=Length[tempWithOut],WriteString[tex,ToString[tempWithOut[[k,1]]]<>"  &  "<>ToString[tempWithOut[[k,2]]]<>"  &  "<>ToString[100.*tempWithOut[[k,2]]/anzahlWithOut]<>"\\\\ \n"];
k++;];
WriteString[tex,"\\hline \n "];
WriteString[tex,"\\end{tabular} \n \n"];
WriteString[tex,"\\end{center} \n \n"];


];



factor = Factorial[Length[saveDPP]-1];
tex=OpenAppend["results_summed.tex"];

For[iPIC=1,iPIC<=Length[CheckLSP],
tempTotal={};
tempDom={};
For[iDPP=1,iDPP<=Length[saveDPP],
Get[ToString[CheckLSP[[iPIC]]]<>ToString[saveDPP[[iDPP]]]<>".out"];
tempTotal = Join[tempTotal,HistoGramTotal //. {jet3->jet,lep3->jet,a_ MET->MET}];
tempDom = Join[tempDom,HistoGramDom//. {jet3->jet,lep3->jet,a_ MET->MET}];
iDPP++;];
temp1={};
For[i=1,i<=Length[tempTotal],
If[FreeQ[temp1,SIG[tempTotal[[i,1]]]],
temp1=Join[temp1,{{SIG[tempTotal[[i,1]]],factor*tempTotal[[i,2]]}}];,
pos=Position[temp1,SIG[tempTotal[[i,1]]]][[1,1]];
temp1[[pos,2]]=temp1[[pos,2]]+factor*tempTotal[[i,2]];
];
i++;];
tempTotal = Sort[temp1 /. SIG[x_]->x,(#1[[2]]>#2[[2]])&];

temp1={};
For[i=1,i<=Length[tempDom],
If[FreeQ[temp1,SIG[tempDom[[i,1]]]],
temp1=Join[temp1,{{SIG[tempDom[[i,1]]],factor*tempDom[[i,2]]}}];,
pos=Position[temp1,SIG[tempDom[[i,1]]]][[1,1]];
temp1[[pos,2]]=temp1[[pos,2]]+factor*tempDom[[i,2]];
];
i++;];
tempDom = Sort[temp1 /. SIG[x_]->x,(#1[[2]]>#2[[2]])&];

WriteString[tex,"\\subsection{"<>ToString[CheckLSP[[iPIC]]]<>"} \n"];
WriteString[tex,"\\subsubsection{All dominant events} \n"];
CurrentHist=tempTotal;
PrintHistogram["All events"];

WriteString[tex,"\\subsubsection{Best visible events} \n"];
CurrentHist=tempDom;
PrintHistogram["Best visible events"];

iPIC++;];

WriteString[tex,"\\end{document} \n"];
Close[tex];





